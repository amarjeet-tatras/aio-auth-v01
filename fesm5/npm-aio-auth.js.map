{"version":3,"file":"npm-aio-auth.js.map","sources":["ng://npm-aio-auth/lib/auth-config.ts","ng://npm-aio-auth/lib/_services/authentication.service.ts","ng://npm-aio-auth/lib/aio-auth-v01.service.ts","ng://npm-aio-auth/lib/aio-auth-v01.component.ts","ng://npm-aio-auth/lib/_helpers/jwt.interceptor.ts","ng://npm-aio-auth/lib/_helpers/error.interceptor.ts","ng://npm-aio-auth/lib/login/login.component.ts","ng://npm-aio-auth/lib/_helpers/must-match.validator.ts","ng://npm-aio-auth/lib/register/register.component.ts","ng://npm-aio-auth/lib/_services/user.ts","ng://npm-aio-auth/lib/fblogin/fblogin.component.ts","ng://npm-aio-auth/lib/gmaillogin/gmaillogin.component.ts","ng://npm-aio-auth/lib/log-out/log-out.component.ts","ng://npm-aio-auth/lib/insta-login/insta-login.component.ts","ng://npm-aio-auth/lib/ion-login/ion-login.component.ts","ng://npm-aio-auth/lib/ion-reg/ion-reg.component.ts","ng://npm-aio-auth/lib/reset-password/reset-password.component.ts","ng://npm-aio-auth/lib/ion-reset-password/ion-reset-password.component.ts","ng://npm-aio-auth/lib/aio-auth-v01.module.ts","ng://npm-aio-auth/lib/_guards/auth.guard.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n// first define an interface for our configuration\nexport interface AuthConfig {\n  gmailProvider: string; \n  gmailAPIKey: string;\n  FBProvider: string;\n  AfterLoginURL: string;\n  loginURL: string;\n  registerURL: string;\n  forgetPwdURL: string;\n  ApiURL: string;\n  IGClientid: string;\n  IGRedirectURL: string;\n  regSuccessMsg :string;\n  resetPwdURL:string;  \n}\n\n// then define injectionToken\nexport const AuthConfigService = new InjectionToken<AuthConfig>(\n  'AuthConfig'\n);\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError, Subscriber } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { User } from '../_models/user';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\n//import { AioAuthV01Service } from '../aio-auth-v01.service';\n \n\n@Injectable({ providedIn: 'root' })\nexport class AuthenticationService {\n    private currentUserSubject: BehaviorSubject<User>;\n    public currentUser: Observable<User>;\n\n    constructor(private http: HttpClient,  @Inject(AuthConfigService) private authconfig: AuthConfig) {\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n        this.currentUser = this.currentUserSubject.asObservable();\n        \n    }\n\n    public get currentUserValue(): User {\n        return this.currentUserSubject.value;\n    }\n \n    /**\n     * validate username and password \n     * @method: login\n     * @input: username & password\n     * @output: Users data object      * \n     */\n\n    login(dataObj) {\n       \n       return this.http.post<any>(this.authconfig.ApiURL+'/login', dataObj)\n            .pipe( tap( // Log the result or error\n                user => {\n                    localStorage.setItem('currentUser', JSON.stringify(user));\n                    this.currentUserSubject.next(user);\n                    return user; \n                },\n                error => {\n                    throwError(error);\n                }\n              ));\n\n    }\n\n    /**\n     * Facebook Login\n     */\n    FBlogin( data : any ){\n        var username = data.email;\n        var password = data.id;\n        return this.http.post<any>(this.authconfig.ApiURL+'/login', { username, password })\n            .pipe( tap( // Log the result or error\n                user => {\n                    localStorage.setItem('currentUser', JSON.stringify(user));\n                    this.currentUserSubject.next(user);\n                    return user; \n                },\n                error => {\n                    throwError(error);\n                }\n              ));\n    }\n\n    logout() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('currentUser');\n        this.currentUserSubject.next(null);\n    }\n    \n    /**\n     * @method: register()\n     * @input: user data in Object\n     * @output: boolean  \n     */\n    register(dataObj){\n       // console.log(displayName, full_name, email, password, provider, photoURL, access_token)\n        return this.http.post<any>(this.authconfig.ApiURL+'/create_user', dataObj)\n        .pipe( tap(\n            user => {               \n                return user; \n            },\n            error => {                \n                throwError(error);\n            }\n          ));\n\n    }\n\n    /**\n     * check email existance\n     * @input: email\n     * @output: object\n     */\n    checkEmailExis(email){  \n        return this.http.post<any>(this.authconfig.ApiURL+'/users/auth', { email: email })\n        .pipe( tap(\n            resp => {             \n                return resp; \n            },\n            error => { \n                throwError(error);\n            }\n          ));\n    }\n\n    /**\n     * Facebook Registration/login\n     */\n    fbRegister(data : any){\n         \n        return this.http.post<any>(this.authconfig.ApiURL+'/create_user', { username: data.email, password: data.id, firstName: data.firstName, lastName: data.lastName, provider: data.provider, img_url: data.photoURL })\n        .pipe( tap(\n            user => {               \n                return user; \n            },\n            error => {                \n                throwError(error);\n            }\n          ));\n    }\n\n    /**\n     * Get Instagram User Data\n     * @input: auth token id\n     * @output: object\n     */\n    getInstaUserData(AccessToken){ \n        return this.http.get<any>('https://api.instagram.com/v1/users/self/?access_token='+AccessToken) .pipe( tap(\n            user => {               \n                return user; \n            },\n            error => {                \n                throwError(error);\n            }\n          ));\n    }\n\n    /**\n     * Method to send the reset password link to user's email\n     * @input: email/user Id\n     * @ouput: boolean\n     */\n    resetPassword(emailAdd: string){\n        return this.http.post<any>(this.authconfig.ApiURL+'/reset_password', { email: emailAdd })\n        .pipe( tap(\n            resp => {             \n                return resp; \n            },\n            error => { \n                throwError(error);\n            }\n          ));\n\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { AuthConfig, AuthConfigService } from './auth-config';\nimport { AuthenticationService } from './_services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AioAuthV01Service {\n  \n  static fbProvider = '';\n  static GmProvider = 'default';\n  \n  constructor(@Inject(AuthConfigService) private authConfig: AuthConfig,  private authSer: AuthenticationService) {}\n   \n\n  /**\n   * Method to get the login status\n   * \n   */\n  public get isLogin(){\n    return this.authSer.currentUserValue;\n  }\n\n  // path to redirect after login\n  getLoginRedirect(){\n    return this.authConfig.AfterLoginURL;\n  } \n}\n","import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'lib-aio-auth-v01',\n  template: `\n    <p>\n      aio-auth-v01 works!\n    </p>\n  `,\n  styles: []\n})\nexport class AioAuthV01Component implements OnInit {\n\n  constructor( ) { }\n\n  ngOnInit() {\n  } \n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { AuthenticationService } from '../_services/authentication.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private authenticationService: AuthenticationService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add authorization header with jwt token if available\n       \n        let currentUser = this.authenticationService.currentUserValue;\n        if (currentUser && currentUser.token) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${currentUser.token}`\n                }\n            });\n        }\n        //console.log('clone header'+JSON.stringify(request))\n        return next.handle(request);\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { AuthenticationService } from '../_services/authentication.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private authenticationService: AuthenticationService, private router: Router) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n       \n        return next.handle(request).pipe(catchError(err => {\n            console.log('Error Inceptor',err)\n            if (err.status === 401) {\n                // auto logout if 401 response returned from api\n                this.authenticationService.logout();                \n                this.router.navigate(['/']);\n            }\n            const error = err.error.message || err.statusText;\n           \n            return throwError(error);\n        }))\n    }\n}","import { Component, OnInit, Inject, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\n\n@Component({\n  selector: 'td-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n    public loginForm: FormGroup;\n    public loading = false;\n    public submitted = false;\n    public returnUrl: string;\n    public error = '';\n    public showLogin: Boolean = true;\n    public currentUser: any;\n    \n    public regURL: string = (this.authconfig.registerURL) ? this.authconfig.registerURL :'register';\n    \n    public resetPwdURL: string = (this.authconfig.resetPwdURL) ? this.authconfig.resetPwdURL :'reset-password';\n    \n\n    @Input() loginBtnText: String = 'Login';\n    @Input() RegBtnText: String = 'Register';\n    @Input() heading: String = '';\n    @Input() registerLink: number = 1;\n    @Input() passwordHints: String = \"\";\n    \n\n\n    constructor(\n        public formBuilder: FormBuilder,\n        public route: ActivatedRoute,\n        public router: Router,\n        public authenticationService: AuthenticationService,\n        @Inject(AuthConfigService) public authconfig: AuthConfig\n    ) { }\n\n    ngOnInit() {\n\n        if(this.authenticationService.currentUserValue){\n            this.showLogin = false;\n            this.currentUser = this.authenticationService.currentUserValue;            \n        }\n        this.registerLink = (this.registerLink == 1 ) ? 0 : 1 ;\n        this.loginForm = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(30)]]\n        });\n        console.log(this.passwordHints);\n        // reset login status\n       // this.authenticationService.logout();\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || this.authconfig.AfterLoginURL;\n        \n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authenticationService.login(this.f)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                    console.log(error)\n                    this.error = error;\n                    this.loading = false;\n                });\n    }\n}","import { FormGroup } from '@angular/forms';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { first } from 'rxjs/operators';\nimport { debounceTime } from 'rxjs/operators';\n\n\n// custom validator to check that two fields match\n\n\nexport function MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n            // return if another validator has already found an error on the matchingControl\n            return;\n        }\n\n        // set error on matchingControl if validation fails\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ mustMatch: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    }\n}\n/*\nexport function userExist(controlName: string) {\n    return (formGroup: FormGroup, authServ : AuthenticationService) => {\n        const userControl = formGroup.controls[controlName]; \n\n        if (userControl.errors && !userControl.errors.userExist) {\n            // return if another validator has already found an error on the matchingControl\n            return;\n        }\n         \n        authServ.checkEmailExis(userControl)\n        .pipe(first(), debounceTime(200))\n        .subscribe(\n            resp => {\n               return resp; \n            },\n            error => { \n                this.error = error;\n                this.loading = false;\n            });\n\n        // set error on matchingControl if validation fails\n        if (userControl.value !== 'amarjeet') {\n            userControl.setErrors({ userExist: true });\n        } else {\n            userControl.setErrors(null);\n        }\n    }\n}*/","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { FormBuilder,Validators, FormGroup} from '@angular/forms';\nimport { MustMatch } from '../_helpers/must-match.validator';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { first, debounceTime, distinctUntilChanged, mergeMap, delay } from 'rxjs/operators';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\n \n\n@Component({\n  selector: 'td-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n  error = ''; \n  registerForm: FormGroup;\n \n  custClass = '';\n  frmShow  = true;\n  public loginURL: string = (this.authconfig.loginURL) ? this.authconfig.loginURL :'login';\n  public regSuccessMsg: string = (this.authconfig.regSuccessMsg) ? this.authconfig.regSuccessMsg :'Successfully Submitted';\n  @Input() loginBtnText: String = 'Login';\n  @Input() RegBtnText: String = 'Register';\n  @Input() heading: String = 'User Register';\n\n\n\n\n  constructor(\n    public fb: FormBuilder, \n    public route: ActivatedRoute,\n    public router: Router,\n    public authenticationService: AuthenticationService,\n    @Inject(AuthConfigService) public authconfig: AuthConfig\n  ) { }\n\n  \n  // get controll value for form validatation \n  get f() { return this.registerForm.controls; } \n\n/**\n * @ Method to do register\n * @ input: the required fields like username, email, password etc\n * @ output: objservable\n */\n  onSubmit(){\n    this.submitted = true;\n\n\n    if(this.registerForm.invalid && this.userExist == false){\n      console.log('Reg Form Error');\n      return ;\n    }   \n   \n    this.loading = true;\n    this.authenticationService.register(this.f)\n      .pipe(first())\n      .subscribe(\n          resp => { \n            if(resp.errorCode ==null){\n              this.custClass = 'success'; \n              this.frmShow = false;              \n            }else if(resp.errorCode == 'user_exist'){\n              this.userExist = true;  \n            }else{\n              this.error = 'Something wrong';              \n            }            \n          },\n          error => {\n              this.error = error;\n              this.loading = false;\n          });\n      //this.registerForm.reset(); \n}\n\n  ngOnInit() {\n    this.registerForm = this.fb.group(\n        {\n          email: ['', [Validators.required, Validators.email]],\n          firstName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n          lastName: ['', [Validators.required , Validators.minLength(2), Validators.maxLength(30)]],\n          password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(30)]],\n          confirmPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(30)]]\n        },\n        {\n          validator: [MustMatch('password', 'confirmPassword')]\n        }\n    )\n  };\n  userExist: boolean = false;\n  curEmail: string = '';\n  \n  async isEmailUnique(email: string) { \n    \n    if(this.f.firstName.value ==\"\" && this.f.lastName.value==\"\"){\n      return false;\n    }  \n\n    if(email == this.curEmail){\n      return false;\n    }else{\n      this.curEmail = email;\n    } \n\n    await this.authenticationService.checkEmailExis(email)\n    .pipe(\n      first(), \n      debounceTime(200),\n      distinctUntilChanged()\n    )\n    .subscribe(\n      resp => {  \n        if(resp.message !='ok'){ \n          this.userExist = true; \n        }else{\n          this.userExist = false; \n        }\n      },\n      error => {\n          this.error = error;\n          this.loading = false;\n      }\n    ); \n  }\n}\n","export class SocialUser {\n    provider: string;\n    id: string;\n    email: string;\n    name: string;\n    photoUrl: string;\n    firstName: string;\n    lastName: string;\n    authToken: string;\n    idToken: string;\n    photoURL: string;\n    authorizationCode: string;\n    /**\n     * Contains the entire object returned from the Facebook API based on the fields you requested.\n     * Only available for the Facebook provider.\n     * Refer to the Graph API for details: https://developers.facebook.com/docs/graph-api\n     */\n    facebook?: any;\n    /**\n     * Contains the entire object returned from the Linked In API based on the fields you requested.\n     * Only available for the Linked In provider.\n     * Refer to the Linked In docs: https://developer.linkedin.com/docs/fields\n     */\n    linkedIn?: any;\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { throwError, Observable } from 'rxjs';\nimport { SocialUser } from '../_services/user';\ndeclare var FB: any;\n\n@Component({\n  selector: 'lib-fblogin',\n  templateUrl: './fblogin.component.html',\n  styleUrls: ['./fblogin.component.css']\n})\nexport class FbloginComponent implements OnInit {\n\n  public currentUser: Observable<SocialUser>;\n\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n  error = '';\n\n  @Input() btnText: String = 'SignIn/SignUp with ';\n  constructor(@Inject(AuthConfigService) private authconfig: AuthConfig, private router: Router, private route: ActivatedRoute, private authenticationService: AuthenticationService) {\n\n  }\n\n  ngAfterViewInit() {\n    let $fbProvider = this.authconfig.FBProvider;\n    (window as any).fbAsyncInit = function () {\n      FB.init({\n        appId: $fbProvider,\n        autoLogAppEvents: true,\n        cookie: true,\n        xfbml: true,\n        version: 'v3.3'\n      });\n    };\n  }\n  ngOnInit() {\n\n    (function (d, s, id) {\n      var js, fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) { return; }\n      js = d.createElement(s); js.id = id;\n      js.async = false;\n      js.src = \"//connect.facebook.net/en_US/sdk.js\";\n      fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));\n  }\n\n  /**\n   * fbLogin method to check or do  facebook login\n   * @input: none\n   * @ouput: object\n   * \n   */\n\n  fbLogin() {\n    this.getFbUserData().then(data => {\n      this.loading = true;\n      this.authenticationService.fbRegister(data)\n        .pipe(first())\n        .subscribe(\n          resp => {\n\n            this.authenticationService.FBlogin(data).subscribe(result => {\n              this.router.navigate([this.authconfig.AfterLoginURL]);\n            });\n          },\n          error => {\n            this.error = error;\n            this.loading = false;\n          });\n\n    }).catch(error => {\n      console.log(error)\n    })\n  }\n\n  /**\n   * @method: Facebook Login\n   * @input: Facebook App Id\n   * @outpt: Object User data \n   */\n  getFbUserData() {\n    return new Promise((\n      function (resolve, reject) {\n        FB.login((function (response) {\n\n          if (response.authResponse) {\n            var authResponse_2 = response.authResponse;\n            FB.api(\"/me\", { locale: 'en_US', fields: 'id,first_name,last_name,email,link,gender,locale,picture' }, (\n              function (fbUser) {\n\n                var user = new SocialUser();\n                user.id = fbUser.id;\n                user.email = fbUser.email;\n                user.photoURL = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n                user.firstName = fbUser.first_name;\n                user.lastName = fbUser.last_name;\n                user.authToken = authResponse_2.accessToken;\n                user.facebook = fbUser;\n                user.provider = \"FACEBOOK\";\n                resolve(user);\n              }));\n          }\n          else {\n            reject('User cancelled login or did not fully authorize.');\n          }\n        }), { scope: 'email' });\n      }\n    ));\n  }\n}","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SocialUser } from '../_services/user';\ndeclare var gapi : any;\n@Component({\n  selector: 'lib-gmaillogin',\n  templateUrl: './gmaillogin.component.html',\n  styleUrls: ['./gmaillogin.component.css']\n})\nexport class GmailloginComponent implements OnInit {\n\n  @Input() btnText: String = 'SignIn/SignUp with ';\n  constructor(private authenticationService: AuthenticationService,\n    @Inject(AuthConfigService) private authconfig: AuthConfig,private router: Router,  private route: ActivatedRoute) { }\n\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n    error = '';\n\n    ngOnInit() {\n\n      // get return url from route parameters or default to '/'\n      this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || this.authconfig.AfterLoginURL;\n      this.initialize().then(response => {\n          \n      }).catch(error => {\n          console.log(error,'error')\n      });\n      \n   }\n\n initialize = function () {\n   let clientSecretId = this.authconfig.gmailProvider;\n   let G_ApiKey = this.authconfig.gmailAPIKey;\n     var _this = this;\n     return new Promise((\n       function (resolve, reject) {\n         _this.loadScript(clientSecretId, 'https://apis.google.com/js/platform.js', (\n           function () {\n             gapi.load('auth2', (\n               \n             function () {\n                 _this.auth2 = gapi.auth2.init({\n                  apiKey: G_ApiKey,\n                  clientId: clientSecretId,\n                  scope: 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/plus.me'\n                 });\n                 _this.auth2.then((\n                   function () {\n                     //_this._readyState.next(true);\n                     resolve();\n                 })).catch((\n                 function (err) {\n                     reject(err);\n                 }));\n             }));\n         }));\n     }));\n };\n \n  \n  loadScript(id, src, onload, async, inner_text_content) {\n      if (async === void 0) { async = true; }\n      if (inner_text_content === void 0) { inner_text_content = ''; }\n      if (document.getElementById(id)) {\n          return;\n      }\n      src= 'https://apis.google.com/js/platform.js';\n      \n      var signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n      signInJS.text = 'Gmail Login'; // LinkedIn\n      document.head.appendChild(signInJS);\n  };\n\n  signInWithGoogle () { \n      const isSignedIn = gapi.auth2.getAuthInstance().isSignedIn.get();\n     /*  if(isSignedIn) {\n        let profile = this.getGoogleProfile();\n        this.authenticationService.register(profile.firstName, profile.lastName, profile.email, profile.id, profile.provider, profile.photoURL)\n        .pipe(first())\n        .subscribe(\n            resp => {\n              this.authenticationService.login(profile.email,profile.id).subscribe(result =>{\n                this.router.navigate([this.authconfig.AfterLoginURL]);\n              });\n            },\n            error => {\n                console.log(error)\n                this.error = error;\n                this.loading = false;\n            });\n      }else{ */\n        gapi.auth2.getAuthInstance().signIn().then(users =>{\n          let profile = this.getGoogleProfile();\n\n          this.authenticationService.register(profile)\n          .pipe(first())\n          .subscribe(\n              resp => {\n                this.authenticationService.login(profile).subscribe(result =>{\n                  this.router.navigate([this.authconfig.AfterLoginURL]);\n                });\n              },\n              error => {\n                  console.log(error)\n                  this.error = error;\n                  this.loading = false;\n              });\n\n        }).catch( error => {\n            console.log('Cancelled');\n        })\n      //}\n  }\n\n  /**\n   * get Google user profile\n   * @input: token\n   * @output: object\n   */\n  getGoogleProfile(){\n      var profile = gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\n      \n      var token = '';//gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse(true).access_token;\n      var backendToken = '';//gapi.auth2.currentUser.getAuthInstance().get().getAuthResponse(true).id_token;    \n      var user = new SocialUser();\n      user.id = profile.getId();\n      user.email = profile.getEmail();\n      user.photoURL = profile.getImageUrl();\n      user.firstName = profile.getGivenName();\n      user.lastName = profile.getFamilyName();;\n      user.authToken = token;\n      user.idToken = backendToken;\n      user.provider = \"GOOGLE\";\n      return user;\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { AuthenticationService } from './../_services/authentication.service';\nimport { Router } from '@angular/router';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\n \n@Component({\n  selector: 'td-log-out',\n  templateUrl: './log-out.component.html',\n  styleUrls: ['./log-out.component.css']\n})\nexport class LogOutComponent implements OnInit {\n\n  constructor( private authenticationService: AuthenticationService, private router: Router,  @Inject(AuthConfigService) private authconfig: AuthConfig) { }\n\n\n  ngOnInit() {\n  }\n  /**\n   * @method: SignOut\n   * @input: none\n   * @output: boolean\n   */\n\n  signOut(){\n    this.authenticationService.logout();                \n    this.router.navigate(['/']);\n  }\n\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\nimport { first } from 'rxjs/operators';\nimport { SocialUser } from '../_services/user';\n\n@Component({\n  selector: 'td-insta-login',\n  templateUrl: './insta-login.component.html',\n  styleUrls: ['./insta-login.component.css']\n})\nexport class InstaLoginComponent implements OnInit {\n  public accessToken = null;\n  private IGClientid = '';\n  private IGRedirectURL = '';\n  @Input() btnText: String = 'Instagram Login';\n\n\n  // constructor start here \n  constructor( private router: Router,\n    private authenticationService: AuthenticationService,    \n    @Inject(AuthConfigService) private authconfig: AuthConfig ) {}\n\n  //ngOnInit called at page load// \n  \n  ngOnInit() {\n    this.IGClientid = this.authconfig.IGClientid;\n    this.IGRedirectURL = (this.authconfig.IGRedirectURL !='') ? this.authconfig.IGRedirectURL : this.authconfig.loginURL ;\n  }\n \n\n  /**\n   * @Method: open the pop up to authorized the user\n   * @input: client Id\n   * @output: access token\n   * \n   */\n  instaSignIn(){    \n\n    this.authenticateInstagram(\n      this.IGClientid,\n      this.IGRedirectURL\n  );\n  return false;\n\n  }\n\n/**\n * @method to open the popup and authenticate the Instagram User\n * @param instagramClientId \n * @param instagramRedirectUri\n * @output user data in object\n */\n\nauthenticateInstagram (instagramClientId, instagramRedirectUri) {\n  let that = this;\n    // Pop-up window size, change if you want\n    let popupWidth = 700,\n        popupHeight = 500,\n        popupLeft = (window.screen.width - popupWidth) / 2,\n        popupTop = (window.screen.height - popupHeight) / 2;\n    // Url needs to point to instagram_auth.php\n    let popup = window.open('instagram_auth.php', '', 'width='+popupWidth+',height='+popupHeight+',left='+popupLeft+',top='+popupTop+'');\n    popup.onload = () =>{\n        // Open authorize url in pop-up\n        if(window.location.hash.length == 0) {\n            popup.open('https://instagram.com/oauth/authorize/?client_id='+instagramClientId+'&redirect_uri='+instagramRedirectUri+'&response_type=token', '_self');\n        }\n        // An interval runs to get the access token from the pop-up\n        let interval = setInterval(() => {\n            try {\n                // Check if hash exists                \n               if(popup.location.hash.length) {\n                    // Hash found, that includes the access token\n                   clearInterval(interval);                  \n                   that.accessToken = popup.location.hash.slice(14); //slice #access_token= from string                                   \n                    popup.close()\n                    that.login_callback();                   \n                   \n                }\n            }\n            catch(evt) {\n              console.log('in err');\n                // Permission denied\n            }\n        }, 100);\n    };\n};\n\n/**\n * @method Instagram Auth call back \n * @param none\n * @output json object\n */\n  login_callback(){     \n    if(this.accessToken){   \n      this.authenticationService.getInstaUserData(this.accessToken).subscribe( result => {\n        if(result){\n          let profile = result.data;\n          let fullName = profile.full_name.split(\" \");\n          \n          // calling the user registration method \n          this.authenticationService.register(profile)\n          .pipe(first())\n          .subscribe(\n              resp => {\n\n                // after successs full registration, just called the login method.\n                this.authenticationService.login(profile).subscribe(result =>{\n                  this.router.navigate([this.authconfig.AfterLoginURL]);\n                });\n              },\n              error => {\n                  console.log(error);\n              });\n        }\n        \n         \n      });       \n\n    }\n    \n  }\n \n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { LoginComponent } from '../login/login.component';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { AuthConfigService, AuthConfig } from '../auth-config';\n\n@Component({\n  selector: 'ion-login',\n  templateUrl: './ion-login.component.html',\n  styleUrls: ['./ion-login.component.css']\n})\nexport class IonLoginComponent extends LoginComponent implements OnInit {\n\n  constructor(public formBuilder: FormBuilder,\n    public route: ActivatedRoute,\n    public router: Router,\n    public authenticationService: AuthenticationService,\n    @Inject(AuthConfigService) public authconfig: AuthConfig) { \n    super(\n      formBuilder,\n      route,\n      router,\n      authenticationService,\n      authconfig\n    );\n  }\n\n  ngOnInit() {\n   super.ngOnInit();\n  }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\n\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\nimport { FormBuilder } from '@angular/forms';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { RegisterComponent } from '../register/register.component';\n\n@Component({\n  selector: 'ion-reg',\n  templateUrl: './ion-reg.component.html',\n  styleUrls: ['./ion-reg.component.css']\n})\nexport class IonRegComponent extends RegisterComponent{\n\n  \n  constructor(\n   \n    public fb: FormBuilder, \n    public route: ActivatedRoute,\n    public router: Router,\n    public authenticationService: AuthenticationService,\n    @Inject(AuthConfigService) public authconfig: AuthConfig\n    ) { \n      super(\n        fb,\n        route,\n        router,\n        authenticationService,\n        authconfig\n      )\n    }\n\n  ngOnInit() {\n    super.ngOnInit(); \n  }\n\n}\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\n\n@Component({\n  selector: 'reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  public resetPwdForm: FormGroup;\n  public loading = false;\n  public submitted = false;\n  public returnUrl: string;\n  public error = '';\n  public showLogin: Boolean = true;\n  public currentUser: any;\n  \n  public loginURL: string = (this.authconfig.loginURL) ? this.authconfig.loginURL :'login';\n  \n  public resetPwdURL: string = (this.authconfig.resetPwdURL) ? this.authconfig.resetPwdURL :'reset-password';\n  public successMsg: string ='';\n\n  @Input() loginBtnText: String = 'Login';\n\n  @Input() heading: String = 'Reset Password';\n\n\n  constructor(\n      public formBuilder: FormBuilder,\n      public route: ActivatedRoute,\n      public router: Router,\n      public authenticationService: AuthenticationService,\n      @Inject(AuthConfigService) public authconfig: AuthConfig\n  ) { }\n\n  ngOnInit() {\n\n      \n\n      this.resetPwdForm = this.formBuilder.group({\n          username: ['', [Validators.required, Validators.email]]\n      });\n\n      // reset login status\n     // this.authenticationService.logout();\n\n      // get return url from route parameters or default to '/'\n      this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || this.authconfig.AfterLoginURL;\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.resetPwdForm.controls; }\n\n  onSubmit() {\n      this.submitted = true;\n\n      // stop here if form is invalid\n      if (this.resetPwdForm.invalid) {\n          return;\n      }\n      \n      this.loading = true;\n      this.authenticationService.resetPassword(this.f.username.value).subscribe(res =>{\n        if(res.message  ==\"ok\"){\n          this.successMsg =  \"Password reset link has been sent to your registered email. To reset password check email.\";\n        }else{\n          this.error =  \"Something wrong with server. Please try again\";\n        }  \n      });\n      \n  }\n\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { ResetPasswordComponent } from '../reset-password/reset-password.component';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { AuthConfig, AuthConfigService } from '../auth-config';\n\n\n@Component({\n  selector: 'ion-reset-password',\n  templateUrl: './ion-reset-password.component.html',\n  styleUrls: ['./ion-reset-password.component.css']\n})\nexport class IonResetPasswordComponent extends ResetPasswordComponent implements OnInit {\n\n  constructor( public formBuilder: FormBuilder,\n    public route: ActivatedRoute,\n    public router: Router,\n    public authenticationService: AuthenticationService,\n    @Inject(AuthConfigService) public authconfig: AuthConfig) { \n    super(\n      formBuilder,\n      route,\n      router,\n      authenticationService,\n      authconfig\n    )\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n}\n","import { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';  \nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { JwtInterceptor } from '../lib/_helpers/jwt.interceptor';\nimport { ErrorInterceptor } from '../lib/_helpers/error.interceptor';\nimport { AioAuthV01Component } from './aio-auth-v01.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { FbloginComponent } from './fblogin/fblogin.component';\nimport { GmailloginComponent } from './gmaillogin/gmaillogin.component';\nimport { AioAuthV01Service } from './aio-auth-v01.service'; \nimport { AuthConfig, AuthConfigService } from './auth-config';\nimport { LogOutComponent } from './log-out/log-out.component';\nimport { InstaLoginComponent } from './insta-login/insta-login.component';\nimport { IonLoginComponent } from './ion-login/ion-login.component';\nimport { IonicModule } from '@ionic/angular';\nimport { IonRegComponent } from './ion-reg/ion-reg.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { IonResetPasswordComponent } from './ion-reset-password/ion-reset-password.component';\n \n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent\n  }\n];\n@NgModule({\n  declarations: [AioAuthV01Component, LoginComponent, RegisterComponent, FbloginComponent, GmailloginComponent, LogOutComponent, InstaLoginComponent, IonLoginComponent, IonRegComponent, ResetPasswordComponent, IonResetPasswordComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    IonicModule,\n    RouterModule.forChild(routes)    \n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n    \n  ],\n  exports: [AioAuthV01Component, LoginComponent, RegisterComponent, FbloginComponent, GmailloginComponent, LogOutComponent, InstaLoginComponent, IonLoginComponent, IonRegComponent, ResetPasswordComponent, IonResetPasswordComponent, RouterModule]\n})\n\n\nexport class AioAuthV01Module {\n  static forRoot(config: AuthConfig): ModuleWithProviders {\n   \n    return {\n      ngModule: AioAuthV01Module,\n      providers: [\n        AioAuthV01Service,\n        {\n          provide: AuthConfigService,\n          useValue: config\n        }\n      ]\n    };\n  }\n  \n }\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n\n    constructor(private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        if (localStorage.getItem('currentUser')) {\n            // logged in so return true\n            return true;\n        }\n\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false;\n    }\n}"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;;;;;AAAA;;AAmBA,IAAa,iBAAiB,GAAG,IAAI,cAAc,CACjD,YAAY,CACb;;;;;;ACrBD;AASA;IAKI,+BAAoB,IAAgB,EAAsC,UAAsB;QAA5E,SAAI,GAAJ,IAAI,CAAY;QAAsC,eAAU,GAAV,UAAU,CAAY;QAC5F,IAAI,CAAC,kBAAkB,GAAG,IAAI,eAAe,CAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KAE7D;IAED,sBAAW,mDAAgB;;;;QAA3B;YACI,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;SACxC;;;OAAA;;;;;;;;;;;;;;;IASD,qCAAK;;;;;;;;IAAL,UAAM,OAAO;QAAb,iBAcC;QAZE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,UAAU,CAAC,MAAM,GAAC,QAAQ,EAAE,OAAO,CAAC;aAC9D,IAAI,CAAE,GAAG;;;;;;QACN;QAAA,IAAI;YACA,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1D,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnC,OAAO,IAAI,CAAC;SACf;;;;QACD,UAAA,KAAK;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;SACrB,EACF,CAAC,CAAC;KAEZ;;;;;;;;;IAKD,uCAAO;;;;;IAAP,UAAS,IAAU;QAAnB,iBAcC;;YAbO,QAAQ,GAAG,IAAI,CAAC,KAAK;;YACrB,QAAQ,GAAG,IAAI,CAAC,EAAE;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,UAAU,CAAC,MAAM,GAAC,QAAQ,EAAE,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;aAC9E,IAAI,CAAE,GAAG;;;;;;QACN;QAAA,IAAI;YACA,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1D,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnC,OAAO,IAAI,CAAC;SACf;;;;QACD,UAAA,KAAK;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;SACrB,EACF,CAAC,CAAC;KACZ;;;;IAED,sCAAM;;;IAAN;;QAEI,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACvC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACtC;;;;;;;;;;;;;IAOD,wCAAQ;;;;;;;IAAR,UAAS,OAAO;;QAEZ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,UAAU,CAAC,MAAM,GAAC,cAAc,EAAE,OAAO,CAAC;aACzE,IAAI,CAAE,GAAG;;;;QACN,UAAA,IAAI;YACA,OAAO,IAAI,CAAC;SACf;;;;QACD,UAAA,KAAK;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;SACrB,EACF,CAAC,CAAC;KAER;;;;;;;;;;;;;IAOD,8CAAc;;;;;;;IAAd,UAAe,KAAK;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,UAAU,CAAC,MAAM,GAAC,aAAa,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;aACjF,IAAI,CAAE,GAAG;;;;QACN,UAAA,IAAI;YACA,OAAO,IAAI,CAAC;SACf;;;;QACD,UAAA,KAAK;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;SACrB,EACF,CAAC,CAAC;KACR;;;;;;;;;IAKD,0CAAU;;;;;IAAV,UAAW,IAAU;QAEjB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,UAAU,CAAC,MAAM,GAAC,cAAc,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aAClN,IAAI,CAAE,GAAG;;;;QACN,UAAA,IAAI;YACA,OAAO,IAAI,CAAC;SACf;;;;QACD,UAAA,KAAK;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;SACrB,EACF,CAAC,CAAC;KACR;;;;;;;;;;;;;IAOD,gDAAgB;;;;;;;IAAhB,UAAiB,WAAW;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,wDAAwD,GAAC,WAAW,CAAC,CAAE,IAAI,CAAE,GAAG;;;;QACtG,UAAA,IAAI;YACA,OAAO,IAAI,CAAC;SACf;;;;QACD,UAAA,KAAK;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;SACrB,EACF,CAAC,CAAC;KACR;;;;;;;;;;;;;IAOD,6CAAa;;;;;;;IAAb,UAAc,QAAgB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,UAAU,CAAC,MAAM,GAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;aACxF,IAAI,CAAE,GAAG;;;;QACN,UAAA,IAAI;YACA,OAAO,IAAI,CAAC;SACf;;;;QACD,UAAA,KAAK;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;SACrB,EACF,CAAC,CAAC;KAER;;gBAnJJ,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;gBARzB,UAAU;gDAayB,MAAM,SAAC,iBAAiB;;;gCAdpE;CASA;;;;;;ACTA;IAaE,2BAA+C,UAAsB,EAAW,OAA8B;QAA/D,eAAU,GAAV,UAAU,CAAY;QAAW,YAAO,GAAP,OAAO,CAAuB;KAAI;IAOlH,sBAAW,sCAAO;;;;;;;;;;QAAlB;YACE,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;SACtC;;;OAAA;;;;;;IAGD,4CAAgB;;;;;IAAhB;QACE,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;KACtC;IAjBM,4BAAU,GAAG,EAAE,CAAC;IAChB,4BAAU,GAAG,SAAS,CAAC;;gBAP/B,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gDAOc,MAAM,SAAC,iBAAiB;gBAX9B,qBAAqB;;;4BAF9B;CAIA;;;;;;ACJA;IAcE;KAAkB;;;;IAElB,sCAAQ;;;IAAR;KACC;;gBAdF,SAAS,SAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,QAAQ,EAAE,oDAIT;iBAEF;;;;IAOD,0BAAC;CAfD;;;;;;ACHA;IAQI,wBAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;KAAK;;;;;;IAErE,kCAAS;;;;;IAAT,UAAU,OAAyB,EAAE,IAAiB;;;;YAG9C,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB;QAC7D,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,EAAE;YAClC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;gBACpB,UAAU,EAAE;oBACR,aAAa,EAAE,YAAU,WAAW,CAAC,KAAO;iBAC/C;aACJ,CAAC,CAAC;SACN;;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC/B;;gBAjBJ,UAAU;;;;gBAFF,qBAAqB;;IAoB9B,qBAAC;CAlBD;;;;;;ACNA;IAUI,0BAAoB,qBAA4C,EAAU,MAAc;QAApE,0BAAqB,GAArB,qBAAqB,CAAuB;QAAU,WAAM,GAAN,MAAM,CAAQ;KAAK;;;;;;IAE7F,oCAAS;;;;;IAAT,UAAU,OAAyB,EAAE,IAAiB;QAAtD,iBAaC;QAXG,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU;;;;QAAC,UAAA,GAAG;YAC3C,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAC,GAAG,CAAC,CAAA;YACjC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;;gBAEpB,KAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;gBACpC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC/B;;gBACK,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,IAAI,GAAG,CAAC,UAAU;YAEjD,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC5B,EAAC,CAAC,CAAA;KACN;;gBAjBJ,UAAU;;;;gBAFF,qBAAqB;gBAFrB,MAAM;;IAsBf,uBAAC;CAlBD;;;;;;ACRA;IAmCI,wBACW,WAAwB,EACxB,KAAqB,EACrB,MAAc,EACd,qBAA4C,EACjB,UAAsB;QAJjD,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,0BAAqB,GAArB,qBAAqB,CAAuB;QACjB,eAAU,GAAV,UAAU,CAAY;QAzBrD,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAElB,UAAK,GAAG,EAAE,CAAC;QACX,cAAS,GAAY,IAAI,CAAC;QAG1B,WAAM,GAAW,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,GAAE,UAAU,CAAC;QAEzF,gBAAW,GAAW,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,GAAE,gBAAgB,CAAC;QAGlG,iBAAY,GAAW,OAAO,CAAC;QAC/B,eAAU,GAAW,UAAU,CAAC;QAChC,YAAO,GAAW,EAAE,CAAC;QACrB,iBAAY,GAAW,CAAC,CAAC;QACzB,kBAAa,GAAW,EAAE,CAAC;KAU/B;;;;IAEL,iCAAQ;;;IAAR;QAEI,IAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAC;YAC3C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC;SAClE;QACD,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAK,CAAC,GAAG,CAAC,CAAE;QACvD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACpC,QAAQ,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;SAC3F,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;;;QAKhC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;KAElG;IAGD,sBAAI,6BAAC;;;;;;;QAAL,cAAU,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;;;OAAA;;;;IAE3C,iCAAQ;;;IAAR;QAAA,iBAoBC;QAnBG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;QAGtB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YACxB,OAAO;SACV;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;aACnC,IAAI,CAAC,KAAK,EAAE,CAAC;aACb,SAAS;;;;QACN,UAAA,IAAI;YACA,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SAC1C;;;;QACD,UAAA,KAAK;YACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YAClB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB,EAAC,CAAC;KACd;;gBA/EJ,SAAS,SAAC;oBACT,QAAQ,EAAE,UAAU;oBACpB,u7EAAqC;;iBAEtC;;;;gBATQ,WAAW;gBADH,cAAc;gBAAtB,MAAM;gBAGN,qBAAqB;gDAoCrB,MAAM,SAAC,iBAAiB;;;+BAb5B,KAAK;6BACL,KAAK;0BACL,KAAK;+BACL,KAAK;gCACL,KAAK;;IAwDV,qBAAC;CAhFD;;;;;;;;;;;;ACEA,SAAgB,SAAS,CAAC,WAAmB,EAAE,mBAA2B;IACtE;;;;IAAO,UAAC,SAAoB;;YAClB,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC;;YACzC,eAAe,GAAG,SAAS,CAAC,QAAQ,CAAC,mBAAmB,CAAC;QAE/D,IAAI,eAAe,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE;;YAE7D,OAAO;SACV;;QAGD,IAAI,OAAO,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,EAAE;YACzC,eAAe,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;SAClD;aAAM;YACH,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACnC;KACJ,EAAA;CACJ;;;;;;;ICOC,2BACS,EAAe,EACf,KAAqB,EACrB,MAAc,EACd,qBAA4C,EACjB,UAAsB;QAJjD,OAAE,GAAF,EAAE,CAAa;QACf,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,0BAAqB,GAArB,qBAAqB,CAAuB;QACjB,eAAU,GAAV,UAAU,CAAY;QAtB1D,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAElB,UAAK,GAAG,EAAE,CAAC;QAGX,cAAS,GAAG,EAAE,CAAC;QACf,YAAO,GAAI,IAAI,CAAC;QACT,aAAQ,GAAW,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAE,OAAO,CAAC;QAClF,kBAAa,GAAW,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,GAAE,wBAAwB,CAAC;QAChH,iBAAY,GAAW,OAAO,CAAC;QAC/B,eAAU,GAAW,UAAU,CAAC;QAChC,YAAO,GAAW,eAAe,CAAC;QAkE3C,cAAS,GAAY,KAAK,CAAC;QAC3B,aAAQ,GAAW,EAAE,CAAC;KAxDjB;IAIL,sBAAI,gCAAC;;;;;;;QAAL,cAAU,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;;;OAAA;;;;;;;;;;;;IAO9C,oCAAQ;;;;;;IAAR;QAAA,iBA4BD;QA3BG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAGtB,IAAG,IAAI,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,CAAC,SAAS,IAAI,KAAK,EAAC;YACtD,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC9B,OAAQ;SACT;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;aACxC,IAAI,CAAC,KAAK,EAAE,CAAC;aACb,SAAS;;;;QACN,UAAA,IAAI;YACF,IAAG,IAAI,CAAC,SAAS,IAAG,IAAI,EAAC;gBACvB,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACtB;iBAAK,IAAG,IAAI,CAAC,SAAS,IAAI,YAAY,EAAC;gBACtC,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aACvB;iBAAI;gBACH,KAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC;aAChC;SACF;;;;QACD,UAAA,KAAK;YACD,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB,EAAC,CAAC;;KAEZ;;;;IAEC,oCAAQ;;;IAAR;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAC7B;YACE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;YACpD,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YACzF,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YACzF,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;SAChG,EACD;YACE,SAAS,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;SACtD,CACJ,CAAA;KACF;;;;;IAIK,yCAAa;;;;IAAnB,UAAoB,KAAa;;;;;;wBAE/B,IAAG,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,IAAG,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,IAAE,EAAE,EAAC;4BAC1D,sBAAO,KAAK,EAAC;yBACd;wBAED,IAAG,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAC;4BACxB,sBAAO,KAAK,EAAC;yBACd;6BAAI;4BACH,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;yBACvB;wBAED,qBAAM,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,KAAK,CAAC;iCACrD,IAAI,CACH,KAAK,EAAE,EACP,YAAY,CAAC,GAAG,CAAC,EACjB,oBAAoB,EAAE,CACvB;iCACA,SAAS;;;;4BACR,UAAA,IAAI;gCACF,IAAG,IAAI,CAAC,OAAO,IAAG,IAAI,EAAC;oCACrB,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;iCACvB;qCAAI;oCACH,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;iCACxB;6BACF;;;;4BACD,UAAA,KAAK;gCACD,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gCACnB,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;6BACxB,EACF,EAAA;;wBAlBD,SAkBC,CAAC;;;;;KACH;;gBAvHF,SAAS,SAAC;oBACT,QAAQ,EAAE,aAAa;oBACvB,yvHAAwC;;iBAEzC;;;;gBAZQ,WAAW;gBAEH,cAAc;gBAAtB,MAAM;gBAEN,qBAAqB;gDAiCzB,MAAM,SAAC,iBAAiB;;;+BAZ1B,KAAK;6BACL,KAAK;0BACL,KAAK;;IAqGR,wBAAC;CAxHD;;;;;;ACTA;IAAA;KAwBC;IAAD,iBAAC;CAAA,IAAA;;;;;;ACxBD;IAwBE,0BAA+C,UAAsB,EAAU,MAAc,EAAU,KAAqB,EAAU,qBAA4C;QAAnI,eAAU,GAAV,UAAU,CAAY;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAgB;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QANlL,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAElB,UAAK,GAAG,EAAE,CAAC;QAEF,YAAO,GAAW,qBAAqB,CAAC;KAGhD;;;;IAED,0CAAe;;;IAAf;;YACM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU;QAC5C,oBAAC,MAAM,IAAS,WAAW;;;QAAG;YAC5B,EAAE,CAAC,IAAI,CAAC;gBACN,KAAK,EAAE,WAAW;gBAClB,gBAAgB,EAAE,IAAI;gBACtB,MAAM,EAAE,IAAI;gBACZ,KAAK,EAAE,IAAI;gBACX,OAAO,EAAE,MAAM;aAChB,CAAC,CAAC;SACJ,CAAA,CAAC;KACH;;;;IACD,mCAAQ;;;IAAR;QAEE,CAAC;;;;;;QAAA,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE;;gBACb,EAAE;;gBAAE,GAAG,GAAG,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;gBAAE,OAAO;aAAE;YACrC,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;YACpC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;YACjB,EAAE,CAAC,GAAG,GAAG,qCAAqC,CAAC;YAC/C,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;SACtC,EAAC,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,CAAC,EAAE;KAC1C;;;;;;;;;;;;;;IASD,kCAAO;;;;;;;IAAP;QAAA,iBAoBC;QAnBC,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI;;;;QAAC,UAAA,IAAI;YAC5B,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,KAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,CAAC;iBACxC,IAAI,CAAC,KAAK,EAAE,CAAC;iBACb,SAAS;;;;YACR,UAAA,IAAI;gBAEF,KAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,SAAS;;;;gBAAC,UAAA,MAAM;oBACvD,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;iBACvD,EAAC,CAAC;aACJ;;;;YACD,UAAA,KAAK;gBACH,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACtB,EAAC,CAAC;SAER,EAAC,CAAC,KAAK;;;;QAAC,UAAA,KAAK;YACZ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;SACnB,EAAC,CAAA;KACH;;;;;;;;;;;;IAOD,wCAAa;;;;;;IAAb;QACE,OAAO,IAAI,OAAO;;;;;QAChB,UAAU,OAAO,EAAE,MAAM;YACvB,EAAE,CAAC,KAAK;;;;YAAE,UAAU,QAAQ;gBAE1B,IAAI,QAAQ,CAAC,YAAY,EAAE;;wBACrB,cAAc,GAAG,QAAQ,CAAC,YAAY;oBAC1C,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,0DAA0D,EAAE;;;;oBACnG,UAAU,MAAM;;4BAEV,IAAI,GAAG,IAAI,UAAU,EAAE;wBAC3B,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;wBACpB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;wBAC1B,IAAI,CAAC,QAAQ,GAAG,6BAA6B,GAAG,MAAM,CAAC,EAAE,GAAG,sBAAsB,CAAC;wBACnF,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC;wBACnC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;wBACjC,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,WAAW,CAAC;wBAC5C,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;wBACvB,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;wBAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf,GAAE,CAAC;iBACP;qBACI;oBACH,MAAM,CAAC,kDAAkD,CAAC,CAAC;iBAC5D;aACF,IAAG,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;SACzB,GACD,CAAC;KACJ;;gBAzGF,SAAS,SAAC;oBACT,QAAQ,EAAE,aAAa;oBACvB,qLAAuC;;iBAExC;;;;gDAWc,MAAM,SAAC,iBAAiB;gBApB9B,MAAM;gBAAE,cAAc;gBAFtB,qBAAqB;;;0BAqB3B,KAAK;;IA4FR,uBAAC;CA1GD;;;;;;ACTA;IAeE,6BAAoB,qBAA4C,EAC3B,UAAsB,EAAS,MAAc,EAAW,KAAqB;QAD9F,0BAAqB,GAArB,qBAAqB,CAAuB;QAC3B,eAAU,GAAV,UAAU,CAAY;QAAS,WAAM,GAAN,MAAM,CAAQ;QAAW,UAAK,GAAL,KAAK,CAAgB;QAFzG,YAAO,GAAW,qBAAqB,CAAC;QAI/C,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAElB,UAAK,GAAG,EAAE,CAAC;QAcd,eAAU;;;QAAG;;gBACP,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa;;gBAC9C,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW;;gBACpC,KAAK,GAAG,IAAI;YAChB,OAAO,IAAI,OAAO;;;;;YAChB,UAAU,OAAO,EAAE,MAAM;gBACvB,KAAK,CAAC,UAAU,CAAC,cAAc,EAAE,wCAAwC;;;gBACvE;oBACE,IAAI,CAAC,IAAI,CAAC,OAAO;;;oBAEjB;wBACI,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;4BAC7B,MAAM,EAAE,QAAQ;4BAChB,QAAQ,EAAE,cAAc;4BACxB,KAAK,EAAE,yIAAyI;yBAChJ,CAAC,CAAC;wBACH,KAAK,CAAC,KAAK,CAAC,IAAI;;;wBACd;;4BAEE,OAAO,EAAE,CAAC;yBACb,GAAE,CAAC,KAAK;;;;wBACT,UAAU,GAAG;4BACT,MAAM,CAAC,GAAG,CAAC,CAAC;yBACf,GAAE,CAAC;qBACP,GAAE,CAAC;iBACP,GAAE,CAAC;aACP,GAAE,CAAC;SACP,EAAC;KA9CsH;;;;IAOrH,sCAAQ;;;IAAR;;QAGE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;QAC/F,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI;;;;QAAC,UAAA,QAAQ;SAE9B,EAAC,CAAC,KAAK;;;;QAAC,UAAA,KAAK;YACV,OAAO,CAAC,GAAG,CAAC,KAAK,EAAC,OAAO,CAAC,CAAA;SAC7B,EAAC,CAAC;KAEL;;;;;;;;;IAgCF,wCAAU;;;;;;;;IAAV,UAAW,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,kBAAkB;QACjD,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;YAAE,KAAK,GAAG,IAAI,CAAC;SAAE;QACvC,IAAI,kBAAkB,KAAK,KAAK,CAAC,EAAE;YAAE,kBAAkB,GAAG,EAAE,CAAC;SAAE;QAC/D,IAAI,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;YAC7B,OAAO;SACV;QACD,GAAG,GAAE,wCAAwC,CAAC;;YAE1C,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;QAC/C,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;QACtB,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC;QACnB,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,QAAQ,CAAC,IAAI,GAAG,aAAa,CAAC;QAC9B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;KACvC;;;;IAED,8CAAgB;;;IAAhB;QAAA,mBAuCC;;YAtCS,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE;;;;;;;;;;;;;;;;;QAiB9D,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI;;;;QAAC,UAAA,KAAK;;gBAC1C,OAAO,GAAG,OAAI,CAAC,gBAAgB,EAAE;YAErC,OAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,OAAO,CAAC;iBAC3C,IAAI,CAAC,KAAK,EAAE,CAAC;iBACb,SAAS;;;;YACN,UAAA,IAAI;gBACF,OAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,SAAS;;;;gBAAC,UAAA,MAAM;oBACxD,OAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;iBACvD,EAAC,CAAC;aACJ;;;;YACD,UAAA,KAAK;gBACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;gBAClB,OAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,OAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACxB,EAAC,CAAC;SAER,EAAC,CAAC,KAAK;;;;QAAE,UAAA,KAAK;YACX,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SAC5B,EAAC,CAAA;;KAEP;;;;;;;;;;;;IAOD,8CAAgB;;;;;;IAAhB;;YACQ,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,eAAe,EAAE;;YAE1E,KAAK,GAAG,EAAE;;;YACV,YAAY,GAAG,EAAE;;;YACjB,IAAI,GAAG,IAAI,UAAU,EAAE;QAC3B,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;QACxC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,OAAO,IAAI,CAAC;KACf;;gBAvIF,SAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,6LAA0C;;iBAE3C;;;;gBATQ,qBAAqB;gDAczB,MAAM,SAAC,iBAAiB;gBAZpB,MAAM;gBAAE,cAAc;;;0BAU5B,KAAK;;IAiIR,0BAAC;CAxID;;;;;;ACPA;IAYE,yBAAqB,qBAA4C,EAAU,MAAc,EAAsC,UAAsB;QAAhI,0BAAqB,GAArB,qBAAqB,CAAuB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAsC,eAAU,GAAV,UAAU,CAAY;KAAK;;;;IAG1J,kCAAQ;;;IAAR;KACC;;;;;;;;;;;;IAOD,iCAAO;;;;;;IAAP;QACE,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7B;;gBArBF,SAAS,SAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,6EAAuC;;iBAExC;;;;gBARQ,qBAAqB;gBACrB,MAAM;gDAUgF,MAAM,SAAC,iBAAiB;;IAgBvH,sBAAC;CAvBD;;;;;;ACLA;;IAoBE,6BAAqB,MAAc,EACzB,qBAA4C,EACjB,UAAsB;QAFtC,WAAM,GAAN,MAAM,CAAQ;QACzB,0BAAqB,GAArB,qBAAqB,CAAuB;QACjB,eAAU,GAAV,UAAU,CAAY;QATpD,gBAAW,GAAG,IAAI,CAAC;QAClB,eAAU,GAAG,EAAE,CAAC;QAChB,kBAAa,GAAG,EAAE,CAAC;QAClB,YAAO,GAAW,iBAAiB,CAAC;KAMmB;;;;;;IAIhE,sCAAQ;;;;;IAAR;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,IAAG,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAE;KACvH;;;;;;;;;;;;;;IASD,yCAAW;;;;;;;IAAX;QAEE,IAAI,CAAC,qBAAqB,CACxB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,aAAa,CACrB,CAAC;QACF,OAAO,KAAK,CAAC;KAEZ;;;;;;;;;;;;;;IASH,mDAAqB;;;;;;;IAArB,UAAuB,iBAAiB,EAAE,oBAAoB;;YACxD,IAAI,GAAG,IAAI;;;YAET,UAAU,GAAG,GAAG;;YAChB,WAAW,GAAG,GAAG;;YACjB,SAAS,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,UAAU,IAAI,CAAC;;YAClD,QAAQ,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,WAAW,IAAI,CAAC;;;YAEnD,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,EAAE,QAAQ,GAAC,UAAU,GAAC,UAAU,GAAC,WAAW,GAAC,QAAQ,GAAC,SAAS,GAAC,OAAO,GAAC,QAAQ,GAAC,EAAE,CAAC;QACpI,KAAK,CAAC,MAAM;;;QAAG;;YAEX,IAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;gBACjC,KAAK,CAAC,IAAI,CAAC,mDAAmD,GAAC,iBAAiB,GAAC,gBAAgB,GAAC,oBAAoB,GAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;aAC3J;;;gBAEG,QAAQ,GAAG,WAAW;;;YAAC;gBACvB,IAAI;;oBAED,IAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;;wBAE3B,aAAa,CAAC,QAAQ,CAAC,CAAC;wBACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;wBAChD,KAAK,CAAC,KAAK,EAAE,CAAA;wBACb,IAAI,CAAC,cAAc,EAAE,CAAC;qBAEzB;iBACJ;gBACD,OAAM,GAAG,EAAE;oBACT,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;;iBAEvB;aACJ,GAAE,GAAG,CAAC;SACV,CAAA,CAAC;KACL;;;;;;;;;;;IAOC,4CAAc;;;;;IAAd;QAAA,iBA4BC;QA3BC,IAAG,IAAI,CAAC,WAAW,EAAC;YAClB,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS;;;;YAAE,UAAA,MAAM;gBAC7E,IAAG,MAAM,EAAC;;wBACJ,SAAO,GAAG,MAAM,CAAC,IAAI;;wBACrB,QAAQ,GAAG,SAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC;;oBAG3C,KAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,SAAO,CAAC;yBAC3C,IAAI,CAAC,KAAK,EAAE,CAAC;yBACb,SAAS;;;;oBACN,UAAA,IAAI;;wBAGF,KAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,SAAO,CAAC,CAAC,SAAS;;;;wBAAC,UAAA,MAAM;4BACxD,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;yBACvD,EAAC,CAAC;qBACJ;;;;oBACD,UAAA,KAAK;wBACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;qBACtB,EAAC,CAAC;iBACR;aAGF,EAAC,CAAC;SAEJ;KAEF;;gBApHF,SAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,8KAA2C;;iBAE5C;;;;gBAVQ,MAAM;gBACN,qBAAqB;gDAoBzB,MAAM,SAAC,iBAAiB;;;0BAN1B,KAAK;;IA6GR,0BAAC;CAtHD;;;;;;;ICKuCA,qCAAc;IAEnD,2BAAmB,WAAwB,EAClC,KAAqB,EACrB,MAAc,EACd,qBAA4C,EACjB,UAAsB;QAJ1D,YAKE,kBACE,WAAW,EACX,KAAK,EACL,MAAM,EACN,qBAAqB,EACrB,UAAU,CACX,SACF;QAZkB,iBAAW,GAAX,WAAW,CAAa;QAClC,WAAK,GAAL,KAAK,CAAgB;QACrB,YAAM,GAAN,MAAM,CAAQ;QACd,2BAAqB,GAArB,qBAAqB,CAAuB;QACjB,gBAAU,GAAV,UAAU,CAAY;;KAQzD;;;;IAED,oCAAQ;;;IAAR;QACC,iBAAM,QAAQ,WAAE,CAAC;KACjB;;gBAvBF,SAAS,SAAC;oBACT,QAAQ,EAAE,WAAW;oBACrB,ukFAAyC;;iBAE1C;;;;gBATQ,WAAW;gBACX,cAAc;gBAAE,MAAM;gBACtB,qBAAqB;gDAczB,MAAM,SAAC,iBAAiB;;IAc7B,wBAAC;CAAA,CApBsC,cAAc;;;;;;;ICChBA,mCAAiB;IAGpD,yBAES,EAAe,EACf,KAAqB,EACrB,MAAc,EACd,qBAA4C,EACjB,UAAsB;QAN1D,YAQI,kBACE,EAAE,EACF,KAAK,EACL,MAAM,EACN,qBAAqB,EACrB,UAAU,CACX,SACF;QAbM,QAAE,GAAF,EAAE,CAAa;QACf,WAAK,GAAL,KAAK,CAAgB;QACrB,YAAM,GAAN,MAAM,CAAQ;QACd,2BAAqB,GAArB,qBAAqB,CAAuB;QACjB,gBAAU,GAAV,UAAU,CAAY;;KASvD;;;;IAEH,kCAAQ;;;IAAR;QACE,iBAAM,QAAQ,WAAE,CAAC;KAClB;;gBA3BF,SAAS,SAAC;oBACT,QAAQ,EAAE,SAAS;oBACnB,40HAAuC;;iBAExC;;;;gBARQ,WAAW;gBAFX,cAAc;gBAAE,MAAM;gBAGtB,qBAAqB;gDAiBzB,MAAM,SAAC,iBAAiB;;IAe7B,sBAAC;CAAA,CAxBoC,iBAAiB;;;;;;ACbtD;IAgCE,gCACW,WAAwB,EACxB,KAAqB,EACrB,MAAc,EACd,qBAA4C,EACjB,UAAsB;QAJjD,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,0BAAqB,GAArB,qBAAqB,CAAuB;QACjB,eAAU,GAAV,UAAU,CAAY;QAtBrD,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAElB,UAAK,GAAG,EAAE,CAAC;QACX,cAAS,GAAY,IAAI,CAAC;QAG1B,aAAQ,GAAW,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAE,OAAO,CAAC;QAElF,gBAAW,GAAW,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,GAAE,gBAAgB,CAAC;QACpG,eAAU,GAAU,EAAE,CAAC;QAErB,iBAAY,GAAW,OAAO,CAAC;QAE/B,YAAO,GAAW,gBAAgB,CAAC;KASvC;;;;IAEL,yCAAQ;;;IAAR;QAII,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1D,CAAC,CAAC;;;;QAMH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;KAClG;IAGD,sBAAI,qCAAC;;;;;;;QAAL,cAAU,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;;;OAAA;;;;IAE9C,yCAAQ;;;IAAR;QAAA,iBAiBC;QAhBG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;QAGtB,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAC3B,OAAO;SACV;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS;;;;QAAC,UAAA,GAAG;YAC3E,IAAG,GAAG,CAAC,OAAO,IAAI,IAAI,EAAC;gBACrB,KAAI,CAAC,UAAU,GAAI,4FAA4F,CAAC;aACjH;iBAAI;gBACH,KAAI,CAAC,KAAK,GAAI,+CAA+C,CAAC;aAC/D;SACF,EAAC,CAAC;KAEN;;gBApEF,SAAS,SAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,+4CAA8C;;iBAE/C;;;;gBATQ,WAAW;gBADH,cAAc;gBAAtB,MAAM;gBAGN,qBAAqB;gDAiCvB,MAAM,SAAC,iBAAiB;;;+BAV5B,KAAK;0BAEL,KAAK;;IAgDR,6BAAC;CAtED;;;;;;;ICM+CA,6CAAsB;IAEnE,mCAAoB,WAAwB,EACnC,KAAqB,EACrB,MAAc,EACd,qBAA4C,EACjB,UAAsB;QAJ1D,YAKE,kBACE,WAAW,EACX,KAAK,EACL,MAAM,EACN,qBAAqB,EACrB,UAAU,CACX,SACF;QAZmB,iBAAW,GAAX,WAAW,CAAa;QACnC,WAAK,GAAL,KAAK,CAAgB;QACrB,YAAM,GAAN,MAAM,CAAQ;QACd,2BAAqB,GAArB,qBAAqB,CAAuB;QACjB,gBAAU,GAAV,UAAU,CAAY;;KAQzD;;;;IAED,4CAAQ;;;IAAR;QACE,iBAAM,QAAQ,WAAE,CAAC;KAClB;;gBAvBF,SAAS,SAAC;oBACT,QAAQ,EAAE,oBAAoB;oBAC9B,00CAAkD;;iBAEnD;;;;gBAVQ,WAAW;gBACX,cAAc;gBAAE,MAAM;gBACtB,qBAAqB;gDAezB,MAAM,SAAC,iBAAiB;;IAc7B,gCAAC;CAAA,CApB8C,sBAAsB;;;;;;ACbrE;IAuBM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,OAAO;QACb,SAAS,EAAE,cAAc;KAC1B;CACF;AACD;IAAA;KAkCE;;;;;IAdO,wBAAO;;;;IAAd,UAAe,MAAkB;QAE/B,OAAO;YACL,QAAQ,EAAE,gBAAgB;YAC1B,SAAS,EAAE;gBACT,iBAAiB;gBACjB;oBACE,OAAO,EAAE,iBAAiB;oBAC1B,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;KACH;;gBAhCF,QAAQ,SAAC;oBACR,YAAY,EAAE,CAAC,mBAAmB,EAAE,cAAc,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,eAAe,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,eAAe,EAAE,sBAAsB,EAAE,yBAAyB,CAAC;oBAC1O,OAAO,EAAE;wBACP,YAAY;wBACZ,WAAW;wBACX,mBAAmB;wBACnB,gBAAgB;wBAChB,WAAW;wBACX,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;qBAC9B;oBACD,SAAS,EAAE;wBACT,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE;wBACrE,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAE;qBAExE;oBACD,OAAO,EAAE,CAAC,mBAAmB,EAAE,cAAc,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,eAAe,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,eAAe,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,YAAY,CAAC;iBACpP;;IAkBA,uBAAC;CAlCF;;;;;;AC7BA;IAMI,mBAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;KAAK;;;;;;IAEvC,+BAAW;;;;;IAAX,UAAY,KAA6B,EAAE,KAA0B;QACjE,IAAI,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;;YAErC,OAAO,IAAI,CAAC;SACf;;QAGD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,GAAG,EAAE,EAAC,CAAC,CAAC;QAC3E,OAAO,KAAK,CAAC;KAChB;;gBAdJ,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;gBAFzB,MAAM;;;oBADf;CAGA;;;;;;;;;;;;;;"}
